"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
var User_1 = require("./api/User");
var client_1 = require("./enums/client");
var Session_1 = require("./Session");
var xml2js_1 = require("xml2js");
var path_1 = require("path");
var FormData = require("form-data");
var exceptions_1 = require("./exceptions");
/*
def _try_or_reload_and_retry(fn: Callable[..., T]) -> Callable[..., T]:
    def wrapped(*args: Any, **kw: Any) -> T:
        try:
            return fn(*args, **kw)
        except ResponseErrorLoginCsrfException:
            args[0].reload()
            return fn(*args, **kw)

    return wrapped
*/
var Connection = /** @class */ (function () {
    function Connection(url, timeout) {
        var _this = this;
        this.requestVerificationTokens = [];
        this.session = new Session_1.Session(timeout);
        if (!url.endsWith('/')) {
            url += '/';
        }
        var urlInfo = new URL(url);
        var username = decodeURIComponent(urlInfo.username);
        var password = decodeURIComponent(urlInfo.password);
        urlInfo.username = '';
        urlInfo.password = '';
        this.url = urlInfo.toString();
        this.ready = new Promise(function (resolve, reject) {
            _this.initializeCsrfTokensAndSession().then(function () {
                // Login code
                if (username) {
                    // Username is specified, we need to login
                    var user = new User_1.User(_this, username, password);
                    user.login(true).then(function () {
                        resolve();
                    }).catch(reject);
                }
                else {
                    resolve();
                }
            }).catch(reject);
        });
    }
    Connection.prototype.reload = function () {
        this.initializeCsrfTokensAndSession();
    };
    Connection.prototype.createRequestXml = function (data) {
        /* Force empty tags instead of selfclosing tags */
        var builder = new xml2js_1.Builder({
            renderOpts: {
                pretty: false,
                indent: ' ',
                newline: '\n',
                allowEmpty: true
            }
        });
        return builder.buildObject({
            request: data
        });
    };
    Connection.prototype.processResponseXml = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var xml, parser, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        xml = response.data;
                        if (!xml) {
                            return [2 /*return*/, {}];
                        }
                        parser = new xml2js_1.Parser({ explicitArray: false });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, parser.parseStringPromise(xml)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_1 = _a.sent();
                        if (response.request.responseURL != response.request.url) {
                            return [2 /*return*/, {
                                    'error': {
                                        'code': client_1.ResponseCodeEnum.ERROR_SYSTEM_NO_SUPPORT,
                                        'message': ''
                                    }
                                }];
                        }
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.checkResponseStatus = function (data) {
        var _a, _b;
        var errorCodeToMessage = (_a = {},
            _a[client_1.ResponseCodeEnum.ERROR_SYSTEM_BUSY] = 'System busy',
            _a[client_1.ResponseCodeEnum.ERROR_SYSTEM_NO_RIGHTS] = 'No rights (needs login)',
            _a[client_1.ResponseCodeEnum.ERROR_SYSTEM_NO_SUPPORT] = 'No support',
            _a[client_1.ResponseCodeEnum.ERROR_SYSTEM_UNKNOWN] = 'Unknown',
            _a[client_1.ResponseCodeEnum.ERROR_SYSTEM_CSRF] = 'Session error',
            _a[client_1.ResponseCodeEnum.ERROR_FORMAT_ERROR] = 'Request format error',
            _a);
        var errorCodeToException = (_b = {},
            _b[client_1.ResponseCodeEnum.ERROR_SYSTEM_BUSY] = exceptions_1.ResponseErrorSystemBusyException,
            _b[client_1.ResponseCodeEnum.ERROR_SYSTEM_NO_RIGHTS] = exceptions_1.ResponseErrorLoginRequiredException,
            _b[client_1.ResponseCodeEnum.ERROR_SYSTEM_NO_SUPPORT] = exceptions_1.ResponseErrorNotSupportedException,
            _b[client_1.ResponseCodeEnum.ERROR_SYSTEM_UNKNOWN] = exceptions_1.ResponseErrorException,
            _b[client_1.ResponseCodeEnum.ERROR_SYSTEM_CSRF] = exceptions_1.ResponseErrorLoginCsrfException,
            _b[client_1.ResponseCodeEnum.ERROR_FORMAT_ERROR] = exceptions_1.RequestFormatException,
            _b);
        if ('error' in data) {
            var errorData = data;
            var message = void 0;
            var errorCode = parseInt(errorData.error.code);
            if (!errorData.error.message) {
                message = errorCodeToMessage[errorCode] || 'Unknown';
            }
            else {
                message = errorData.error.message;
            }
            var exception = errorCodeToException[errorCode] || exceptions_1.ResponseErrorException;
            throw new exception("".concat(errorCode, ": ").concat(message), errorCode);
        }
        if ('response' in data) {
            return data['response'];
        }
        else {
            return data || {};
        }
    };
    Connection.prototype.initializeCsrfTokensAndSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, csrfRegex, regexResult, token, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Reset
                        this.requestVerificationTokens = [];
                        return [4 /*yield*/, this.session.get(this.url)];
                    case 1:
                        response = _a.sent();
                        csrfRegex = new RegExp(/name="csrf_token"\s+content="(\S+)"/g);
                        do {
                            regexResult = csrfRegex.exec(response.data);
                            if (regexResult) {
                                this.requestVerificationTokens.push(regexResult[1]);
                            }
                        } while (regexResult);
                        if (!(this.requestVerificationTokens.length == 0)) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.getToken()];
                    case 3:
                        token = _a.sent();
                        this.requestVerificationTokens.push(token);
                        return [3 /*break*/, 5];
                    case 4:
                        error_2 = _a.sent();
                        if (!(error_2 instanceof exceptions_1.ResponseErrorNotSupportedException)) {
                            throw error_2;
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.buildFinalUrl = function (endpoint, prefix) {
        if (prefix === void 0) { prefix = 'api'; }
        var url = new URL((0, path_1.join)(prefix, endpoint), this.url);
        return url.toString();
    };
    Connection.prototype.postGet = function (endpoint, data, refreshCsrf, prefix) {
        if (refreshCsrf === void 0) { refreshCsrf = false; }
        if (prefix === void 0) { prefix = 'api'; }
        return this.post(endpoint, data, refreshCsrf, prefix);
    };
    Connection.prototype.postSet = function (endpoint, data, refreshCsrf, prefix) {
        if (refreshCsrf === void 0) { refreshCsrf = false; }
        if (prefix === void 0) { prefix = 'api'; }
        return this.post(endpoint, data, refreshCsrf, prefix);
    };
    Connection.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, error_3, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 6]);
                        return [4 /*yield*/, this.get('webserver/token')];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data['token']];
                    case 2:
                        error_3 = _a.sent();
                        if (!(error_3 instanceof exceptions_1.ResponseErrorNotSupportedException)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.get('webserver/SesTokInfo')];
                    case 3:
                        data = _a.sent();
                        return [2 /*return*/, data['TokInfo']];
                    case 4: throw error_3;
                    case 5: return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    //@_try_or_reload_and_retry
    Connection.prototype.get = function (endpoint, parameters, prefix) {
        if (prefix === void 0) { prefix = 'api'; }
        return __awaiter(this, void 0, void 0, function () {
            var headers;
            var _this = this;
            return __generator(this, function (_a) {
                headers = {};
                if (this.requestVerificationTokens.length == 1) {
                    headers['__RequestVerificationToken'] = this.requestVerificationTokens[0];
                }
                return [2 /*return*/, this.session.get(this.buildFinalUrl(endpoint, prefix), {
                        params: parameters,
                        headers: headers
                    }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                        var rawData;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.processResponseXml(response)];
                                case 1:
                                    rawData = _a.sent();
                                    return [2 /*return*/, this.checkResponseStatus(rawData)];
                            }
                        });
                    }); })];
            });
        });
    };
    //@_try_or_reload_and_retry
    Connection.prototype.post = function (endpoint, data, refreshCsrf, prefix) {
        if (refreshCsrf === void 0) { refreshCsrf = false; }
        if (prefix === void 0) { prefix = 'api'; }
        return __awaiter(this, void 0, void 0, function () {
            var headers;
            var _this = this;
            return __generator(this, function (_a) {
                headers = {
                    'Content-Type': 'application/xml'
                };
                if (this.requestVerificationTokens.length > 1) {
                    headers['__RequestVerificationToken'] = this.requestVerificationTokens.shift();
                }
                else if (this.requestVerificationTokens.length == 1) {
                    headers['__RequestVerificationToken'] = this.requestVerificationTokens[0];
                }
                return [2 /*return*/, this.session.post(this.buildFinalUrl(endpoint, prefix), (data ? this.createRequestXml(data) : ''), {
                        headers: headers
                    }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                        var responseData;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.processResponseXml(response).then(function (rawData) {
                                        return _this.checkResponseStatus(rawData);
                                    })];
                                case 1:
                                    responseData = _a.sent();
                                    if (refreshCsrf) {
                                        this.requestVerificationTokens = [];
                                    }
                                    if ('__requestverificationtokenone' in response.headers) {
                                        this.requestVerificationTokens.push(response.headers['__requestverificationtokenone']);
                                        if ('__requestverificationtokentwo' in response.headers) {
                                            this.requestVerificationTokens.push(response.headers['__requestverificationtokentwo']);
                                        }
                                    }
                                    else if ('__requestverificationtoken' in response.headers) {
                                        this.requestVerificationTokens.push(response.headers['__requestverificationtoken']);
                                    }
                                    return [2 /*return*/, responseData];
                            }
                        });
                    }); })];
            });
        });
    };
    Connection.prototype.postFile = function (endpoint, files, data, prefix) {
        if (prefix === void 0) { prefix = 'api'; }
        return __awaiter(this, void 0, void 0, function () {
            var formData;
            return __generator(this, function (_a) {
                formData = new FormData();
                if (this.requestVerificationTokens.length > 0) {
                    formData.append('csrf_token', this.requestVerificationTokens[0]);
                }
                Object.entries(files).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    formData.append(key, value);
                });
                if (data) {
                    Object.entries(data).forEach(function (_a) {
                        var key = _a[0], value = _a[1];
                        formData.append(key, value);
                    });
                }
                return [2 /*return*/, this.session.post(this.buildFinalUrl(endpoint, prefix), formData)];
            });
        });
    };
    return Connection;
}());
exports.Connection = Connection;
//# sourceMappingURL=Connection.js.map