import { ApiGroup } from '../ApiGroup';
import { GetResponseType, SetResponseType } from '../types';
import { AuthModeEnum, WepEncryptModeEnum, WpaEncryptModeEnum } from '../enums/wlan';
export declare class WLan extends ApiGroup {
    wifiFeatureSwitch(): Promise<GetResponseType>;
    stationInformation(): Promise<GetResponseType>;
    basicSettings(): Promise<GetResponseType>;
    setBasicSettings(ssid: string, hide?: boolean, wifiRestart?: boolean): Promise<SetResponseType>;
    securitySettings(): Promise<GetResponseType>;
    setSecuritySettings(wpaPsk: string, wepKey?: string, wpaEncryptionMode?: WpaEncryptModeEnum, wepEncryptionMode?: WepEncryptModeEnum, authMode?: AuthModeEnum, wifiRestart?: boolean): Promise<SetResponseType>;
    multiSecuritySettings(): Promise<GetResponseType>;
    multiSecuritySettingsEx(): Promise<GetResponseType>;
    multiBasicSettings(): Promise<GetResponseType>;
    /**
     *
     * @param clients list of dicts with format {'wifihostname': hostname,'WifiMacFilterMac': mac}
     */
    setMultiBasicSettings(clients: Array<string>): Promise<SetResponseType>;
    hostList(): Promise<GetResponseType>;
    handoverSetting(): Promise<GetResponseType>;
    /**
     *
     * @param handover G3_PREFER = 0, WIFI_PREFER = 2
     */
    setHandoverSetting(handover: number): Promise<SetResponseType>;
    multiSwitchSettings(): Promise<GetResponseType>;
    multiMacfilterSettings(): Promise<GetResponseType>;
    /**
     *
     * @param clients list of dicts with format {'wifihostname': hostname,'WifiMacFilterMac': mac}
     */
    setMultiMacfilterSettings(clients: Array<string>): Promise<SetResponseType>;
    multiMacfilterSettingsEx(): Promise<GetResponseType>;
    macFilter(): Promise<GetResponseType>;
    setMacFilter(hostname: string, mac: string): Promise<SetResponseType>;
    oledShowpassword(): Promise<GetResponseType>;
    wps(): Promise<GetResponseType>;
    wpsAppin(): Promise<GetResponseType>;
    wpsPbc(): Promise<GetResponseType>;
    wpsSwitch(): Promise<GetResponseType>;
    statusSwitchSettings(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    wifiprofile(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    wififrequence(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    wifiscanresult(): Promise<GetResponseType>;
}
