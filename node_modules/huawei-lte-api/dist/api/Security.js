"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Security = void 0;
var ApiGroup_1 = require("../ApiGroup");
var Security = /** @class */ (function (_super) {
    __extends(Security, _super);
    function Security() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Security.prototype.bridgemode = function () {
        return this._connection.get('security/bridgemode');
    };
    Security.prototype.getFirewallSwitch = function () {
        return this._connection.get('security/firewall-switch');
    };
    Security.prototype.setFirewallSwitch = function (firewall, ipFilter, wanPingFilter, urlFilter, macFilter) {
        if (firewall === void 0) { firewall = true; }
        if (ipFilter === void 0) { ipFilter = false; }
        if (wanPingFilter === void 0) { wanPingFilter = true; }
        if (urlFilter === void 0) { urlFilter = false; }
        if (macFilter === void 0) { macFilter = false; }
        return this._connection.postSet('security/firewall-switch', {
            'FirewallMainSwitch': firewall ? 1 : 0,
            'FirewallIPFilterSwitch': ipFilter ? 1 : 0,
            'FirewallWanPortPingSwitch': wanPingFilter ? 1 : 0,
            'firewallurlfilterswitch': urlFilter ? 1 : 0,
            'firewallmacfilterswitch': macFilter ? 1 : 0
        });
    };
    Security.prototype.macFilter = function () {
        return this._connection.get('security/mac-filter');
    };
    Security.prototype.lanIpFilter = function () {
        return this._connection.get('security/lan-ip-filter');
    };
    Security.prototype.virtualServers = function () {
        return this._connection.get('security/virtual-servers');
    };
    Security.prototype.urlFilter = function () {
        return this._connection.get('security/url-filter');
    };
    Security.prototype.upnp = function () {
        return this._connection.get('security/upnp');
    };
    Security.prototype.setUpnp = function (enabled) {
        return this._connection.postSet('security/upnp', {
            'UpnpStatus': enabled ? 1 : 0,
        });
    };
    Security.prototype.dmz = function () {
        return this._connection.get('security/dmz');
    };
    Security.prototype.setDmz = function (enabled, ipAddress) {
        return this._connection.postSet('security/dmz', {
            'DmzStatus': enabled ? 1 : 0,
            'DmzIPAddress': ipAddress
        });
    };
    Security.prototype.sip = function () {
        return this._connection.get('security/sip');
    };
    Security.prototype.setSip = function (enabled, port) {
        return this._connection.postSet('security/sip', {
            'SipStatus': enabled ? 1 : 0,
            'SipPort': port
        });
    };
    Security.prototype.featureSwitch = function () {
        return this._connection.get('security/feature-switch');
    };
    Security.prototype.nat = function () {
        return this._connection.get('security/nat');
    };
    Security.prototype.specialApplications = function () {
        return this._connection.get('security/special-applications');
    };
    Security.prototype.whiteLanIpFilter = function () {
        return this._connection.get('security/white-lan-ip-filter');
    };
    Security.prototype.whiteUrlFilter = function () {
        return this._connection.get('security/white-url-filter');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    Security.prototype.acls = function () {
        return this._connection.get('security/acls');
    };
    return Security;
}(ApiGroup_1.ApiGroup));
exports.Security = Security;
//# sourceMappingURL=Security.js.map