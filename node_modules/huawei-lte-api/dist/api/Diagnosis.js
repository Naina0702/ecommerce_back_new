"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Diagnosis = void 0;
var ApiGroup_1 = require("../ApiGroup");
var Diagnosis = /** @class */ (function (_super) {
    __extends(Diagnosis, _super);
    function Diagnosis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Diagnosis.prototype.traceRouteResult = function () {
        return this._connection.get('diagnosis/tracerouteresult');
    };
    Diagnosis.prototype.diagnosePing = function () {
        return this._connection.get('diagnosis/diagnose_ping');
    };
    Diagnosis.prototype.setDiagnosePing = function (host, timeout) {
        if (timeout === void 0) { timeout = 4000; }
        return this._connection.postSet('diagnosis/diagnose_ping', {
            Host: host,
            Timeout: timeout,
        });
    };
    Diagnosis.prototype.diagnoseTraceroute = function () {
        return this._connection.get('diagnosis/diagnose_traceroute');
    };
    Diagnosis.prototype.setDiagnoseTraceroute = function (host, timeout, maxHopCount) {
        if (timeout === void 0) { timeout = 4000; }
        if (maxHopCount === void 0) { maxHopCount = 30; }
        return this._connection.postSet('diagnosis/diagnose_ping', {
            Host: host,
            MaxHopCount: maxHopCount,
            Timeout: timeout,
        });
    };
    Diagnosis.prototype.timeReboot = function () {
        return this._connection.get('diagnosis/time_reboot');
    };
    return Diagnosis;
}(ApiGroup_1.ApiGroup));
exports.Diagnosis = Diagnosis;
//# sourceMappingURL=Diagnosis.js.map