"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdCard = void 0;
var ApiGroup_1 = require("../ApiGroup");
var SdCard = /** @class */ (function (_super) {
    __extends(SdCard, _super);
    function SdCard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SdCard.prototype.dlnaSetting = function () {
        return this._connection.get('sdcard/dlna-setting');
    };
    SdCard.prototype.setDlnaSetting = function (enabled, shareAll, sharePath) {
        if (sharePath === void 0) { sharePath = '/'; }
        return this._connection.postSet('sdcard/dlna-setting', {
            'enabled': enabled ? 1 : 0,
            'sharepath': sharePath,
            'shareallpath': shareAll ? 1 : 0,
        });
    };
    SdCard.prototype.sdcard = function () {
        return this._connection.get('sdcard/sdcard');
    };
    SdCard.prototype.sdcardsamba = function () {
        return this._connection.get('sdcard/sdcardsamba');
    };
    SdCard.prototype.setSdcardsamba = function (enabled, serverName, serverDescription, workgroupName, anonymousAccess, printerEnabled) {
        if (serverName === void 0) { serverName = 'homerouter.cpe'; }
        if (serverDescription === void 0) { serverDescription = 'samba server'; }
        if (workgroupName === void 0) { workgroupName = 'WORKGROUP'; }
        if (anonymousAccess === void 0) { anonymousAccess = false; }
        if (printerEnabled === void 0) { printerEnabled = true; }
        return this._connection.postSet('sdcard/sdcardsamba', {
            'enabled': enabled ? 1 : 0,
            'servername': serverName,
            'serverdescription': serverDescription,
            'workgroupname': workgroupName,
            'anonymousaccess': anonymousAccess ? 1 : 0,
            'printerenable': printerEnabled ? 1 : 0,
        });
    };
    SdCard.prototype.printerlist = function () {
        return this._connection.get('sdcard/printerlist');
    };
    SdCard.prototype.shareAccount = function () {
        return this._connection.get('sdcard/share-account');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    SdCard.prototype.sdfile = function () {
        return this._connection.get('sdcard/sdfile');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    SdCard.prototype.fileupload = function () {
        return this._connection.get('sdcard/fileupload');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    SdCard.prototype.checkFileExist = function () {
        return this._connection.get('sdcard/Check_file_exist');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    SdCard.prototype.createdir = function () {
        return this._connection.get('sdcard/createdir');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    SdCard.prototype.deletefile = function () {
        return this._connection.get('sdcard/deletefile');
    };
    return SdCard;
}(ApiGroup_1.ApiGroup));
exports.SdCard = SdCard;
//# sourceMappingURL=SdCard.js.map