"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = void 0;
var ApiGroup_1 = require("../ApiGroup");
var Voice = /** @class */ (function (_super) {
    __extends(Voice, _super);
    function Voice() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Voice.prototype.featureswitch = function () {
        return this._connection.get('voice/featureswitch');
    };
    Voice.prototype.sipaccount = function () {
        return this._connection.get('voice/sipaccount');
    };
    Voice.prototype.sipadvance = function () {
        return this._connection.get('voice/sipadvance');
    };
    Voice.prototype.sipserver = function () {
        return this._connection.get('voice/sipserver');
    };
    Voice.prototype.speeddial = function () {
        return this._connection.get('voice/speeddial');
    };
    Voice.prototype.functioncode = function () {
        return this._connection.get('voice/functioncode');
    };
    Voice.prototype.voiceadvance = function () {
        return this._connection.get('voice/voiceadvance');
    };
    Voice.prototype.voicebusy = function () {
        return this._connection.get('voice/voicebusy');
    };
    /**
    * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
    */
    Voice.prototype.codec = function () {
        return this._connection.get('voice/codec');
    };
    return Voice;
}(ApiGroup_1.ApiGroup));
exports.Voice = Voice;
//# sourceMappingURL=Voice.js.map