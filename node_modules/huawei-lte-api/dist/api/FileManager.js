"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileManager = void 0;
var ApiGroup_1 = require("../ApiGroup");
var path_1 = require("path");
var FileManager = /** @class */ (function (_super) {
    __extends(FileManager, _super);
    function FileManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Uploads firmware update and triggers it
     * @param uploadfile file to upload
     * @param uploadfileName name of uploaded file
     */
    FileManager.prototype.upload = function (uploadfile, uploadfileName) {
        var uploadfileBasename = (0, path_1.basename)(uploadfileName);
        var extension = (0, path_1.extname)(uploadfileBasename).toLowerCase();
        if (!(extension in ['.bin', '.zip'])) {
            throw new Error('Only *.bin or *.zip is allowed');
        }
        return this._connection.postFile('filemanager/upload', {
            'uploadfile': uploadfile,
        }, {
            'cur_path': "OU:".concat(uploadfileBasename)
        }).then(function (response) {
            return response.data;
        });
    };
    return FileManager;
}(ApiGroup_1.ApiGroup));
exports.FileManager = FileManager;
//# sourceMappingURL=FileManager.js.map