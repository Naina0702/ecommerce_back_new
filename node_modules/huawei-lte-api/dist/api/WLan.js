"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WLan = void 0;
var ApiGroup_1 = require("../ApiGroup");
var wlan_1 = require("../enums/wlan");
var WLan = /** @class */ (function (_super) {
    __extends(WLan, _super);
    function WLan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WLan.prototype.wifiFeatureSwitch = function () {
        return this._connection.get('wlan/wifi-feature-switch');
    };
    WLan.prototype.stationInformation = function () {
        return this._connection.get('wlan/station-information');
    };
    WLan.prototype.basicSettings = function () {
        return this._connection.get('wlan/basic-settings');
    };
    WLan.prototype.setBasicSettings = function (ssid, hide, wifiRestart) {
        if (hide === void 0) { hide = false; }
        if (wifiRestart === void 0) { wifiRestart = false; }
        return this._connection.postSet('wlan/basic-settings', {
            'WifiSsid': ssid,
            'WifiHide': hide,
            'WifiRestart': wifiRestart ? 1 : 0
        });
    };
    WLan.prototype.securitySettings = function () {
        return this._connection.get('wlan/security-settings');
    };
    WLan.prototype.setSecuritySettings = function (wpaPsk, wepKey, wpaEncryptionMode, wepEncryptionMode, authMode, wifiRestart) {
        if (wepKey === void 0) { wepKey = ''; }
        if (wpaEncryptionMode === void 0) { wpaEncryptionMode = wlan_1.WpaEncryptModeEnum.MIX; }
        if (wepEncryptionMode === void 0) { wepEncryptionMode = wlan_1.WepEncryptModeEnum.WEP128; }
        if (authMode === void 0) { authMode = wlan_1.AuthModeEnum.AUTO; }
        if (wifiRestart === void 0) { wifiRestart = true; }
        return this._connection.postSet('wlan/security-settings', {
            'WifiAuthmode': authMode,
            'WifiWepKey1': wepKey,
            'WifiWpaencryptionmodes': wpaEncryptionMode,
            'WifiBasicencryptionmodes': wepEncryptionMode,
            'WifiWpapsk': wpaPsk,
            'WifiRestart': wifiRestart ? 1 : 0
        });
    };
    WLan.prototype.multiSecuritySettings = function () {
        return this._connection.get('wlan/multi-security-settings');
    };
    WLan.prototype.multiSecuritySettingsEx = function () {
        return this._connection.get('wlan/multi-security-settings-ex');
    };
    WLan.prototype.multiBasicSettings = function () {
        return this._connection.get('wlan/multi-basic-settings');
    };
    /**
     *
     * @param clients list of dicts with format {'wifihostname': hostname,'WifiMacFilterMac': mac}
     */
    WLan.prototype.setMultiBasicSettings = function (clients) {
        return this._connection.postSet('wlan/multi-basic-settings', {
            'Ssids': {
                'Ssid': clients
            },
            'WifiRestart': 1
        });
    };
    WLan.prototype.hostList = function () {
        // Make sure Hosts->Host is a list
        // It may be returned as a single dict if only one is associated,
        // as well as sometimes None.
        return this._connection.get('wlan/host-list')
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .then(function (hosts) {
            if (!hosts['Hosts']) {
                hosts['Hosts'] = {};
            }
            if (!Object.prototype.hasOwnProperty.call(hosts['Hosts'], 'Host')) {
                hosts['Hosts']['Host'] = [];
            }
            var host = hosts['Hosts']['Host'];
            if (host instanceof Array) {
                hosts['Hosts']['Host'] = [host];
            }
            return host;
        });
    };
    WLan.prototype.handoverSetting = function () {
        return this._connection.get('wlan/handover-setting');
    };
    /**
     *
     * @param handover G3_PREFER = 0, WIFI_PREFER = 2
     */
    WLan.prototype.setHandoverSetting = function (handover) {
        return this._connection.postSet('wlan/handover-setting', {
            'Handover': handover
        });
    };
    WLan.prototype.multiSwitchSettings = function () {
        return this._connection.get('wlan/multi-switch-settings');
    };
    WLan.prototype.multiMacfilterSettings = function () {
        return this._connection.get('wlan/multi-macfilter-settings');
    };
    /**
     *
     * @param clients list of dicts with format {'wifihostname': hostname,'WifiMacFilterMac': mac}
     */
    WLan.prototype.setMultiMacfilterSettings = function (clients) {
        return this._connection.postSet('wlan/multi-macfilter-settings', {
            'Ssids': {
                'Ssid': clients
            }
        });
    };
    WLan.prototype.multiMacfilterSettingsEx = function () {
        return this._connection.get('wlan/multi-macfilter-settings-ex');
    };
    WLan.prototype.macFilter = function () {
        return this._connection.get('wlan/mac-filter');
    };
    WLan.prototype.setMacFilter = function (hostname, mac) {
        return this._connection.postSet('wlan/mac-filter', {
            'wifihostname': hostname,
            'WifiMacFilterMac': mac
        });
    };
    WLan.prototype.oledShowpassword = function () {
        return this._connection.get('wlan/oled-showpassword');
    };
    WLan.prototype.wps = function () {
        return this._connection.get('wlan/wps');
    };
    WLan.prototype.wpsAppin = function () {
        return this._connection.get('wlan/wps-appin');
    };
    WLan.prototype.wpsPbc = function () {
        return this._connection.get('wlan/wps-pbc');
    };
    WLan.prototype.wpsSwitch = function () {
        return this._connection.get('wlan/wps-switch');
    };
    WLan.prototype.statusSwitchSettings = function () {
        return this._connection.get('wlan/status-switch-settings');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    WLan.prototype.wifiprofile = function () {
        return this._connection.get('wlan/wifiprofile');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    WLan.prototype.wififrequence = function () {
        return this._connection.get('wlan/wififrequence');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage, probably not implemented by Huawei
     */
    WLan.prototype.wifiscanresult = function () {
        return this._connection.get('wlan/wifiscanresult');
    };
    return WLan;
}(ApiGroup_1.ApiGroup));
exports.WLan = WLan;
//# sourceMappingURL=WLan.js.map