"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pb = void 0;
var ApiGroup_1 = require("../ApiGroup");
/**
 * Phone Book
 */
var Pb = /** @class */ (function (_super) {
    __extends(Pb, _super);
    function Pb() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Find number in PhoneBook
     * @param phoneNumber
     */
    Pb.prototype.getPbMatch = function (phoneNumber) {
        return this._connection.postGet('pb/pb-match', {
            'Phone': phoneNumber
        });
    };
    Pb.prototype.getPbList = function (page, keyWord, groupId, readCount) {
        if (page === void 0) { page = 1; }
        if (keyWord === void 0) { keyWord = ''; }
        if (groupId === void 0) { groupId = 0; }
        if (readCount === void 0) { readCount = 50; }
        return this._connection.postGet('pb/pb-list', {
            'GroupID': groupId,
            'PageIndex': page,
            'ReadCount': readCount,
            'KeyWord': keyWord
        });
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    Pb.prototype.pbCount = function () {
        return this._connection.postGet('pb/pb-count', {});
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    Pb.prototype.groupCount = function () {
        return this._connection.postGet('pb/group-count', {});
    };
    return Pb;
}(ApiGroup_1.ApiGroup));
exports.Pb = Pb;
//# sourceMappingURL=Pb.js.map