"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
var crypto = require("crypto-js");
var user_1 = require("../enums/user");
var client_1 = require("../enums/client");
var ApiGroup_1 = require("../ApiGroup");
var exceptions_1 = require("../exceptions");
var User = /** @class */ (function (_super) {
    __extends(User, _super);
    function User(connection, username, password) {
        var _this = _super.call(this, connection) || this;
        _this.username = 'admin';
        _this.username = username || 'admin';
        _this._password = password;
        return _this;
    }
    User.prototype.delay = function (seconds) {
        return new Promise(function (resolve) { return setTimeout(resolve, seconds * 1000); });
    };
    User.prototype.attemptLogin = function (passwordType) {
        if (passwordType === void 0) { passwordType = user_1.PasswordTypeEnum.BASE_64; }
        return __awaiter(this, void 0, void 0, function () {
            var password, concentrated;
            return __generator(this, function (_a) {
                password = '';
                if (this._password) {
                    if (passwordType == user_1.PasswordTypeEnum.SHA256) {
                        concentrated = [
                            this.username,
                            crypto.enc.Base64.stringify(crypto.enc.Utf8.parse(crypto.SHA256(this._password).toString())),
                            this._connection.requestVerificationTokens[0]
                        ].join('');
                        password = crypto.enc.Base64.stringify(crypto.enc.Utf8.parse(crypto.SHA256(concentrated).toString()));
                    }
                    else {
                        password = crypto.enc.Base64.stringify(crypto.enc.Utf8.parse(this._password));
                    }
                }
                return [2 /*return*/, this._connection.postSet('user/login', {
                        'Username': this.username,
                        'Password': password,
                        'password_type': passwordType.toString()
                    }, true).then(function (response) {
                        return response == client_1.ResponseEnum.OK;
                    }).catch(function (error) {
                        var _a, _b;
                        if (error instanceof exceptions_1.ResponseErrorException) {
                            var errorCodeToMessage = (_a = {},
                                _a[user_1.LoginErrorEnum.USERNAME_WRONG] = 'Username wrong',
                                _a[user_1.LoginErrorEnum.PASSWORD_WRONG] = 'Password wrong',
                                _a[user_1.LoginErrorEnum.ALREADY_LOGIN] = 'Already login',
                                _a[user_1.LoginErrorEnum.USERNAME_PWD_WRONG] = 'Username and Password wrong',
                                _a[user_1.LoginErrorEnum.USERNAME_PWD_ORERRUN] = 'Password overrun',
                                _a[user_1.LoginErrorEnum.USERNAME_PWD_MODIFY] = 'Password modify',
                                _a);
                            var errorCodeToException = (_b = {},
                                _b[user_1.LoginErrorEnum.USERNAME_WRONG] = exceptions_1.LoginErrorUsernameWrongException,
                                _b[user_1.LoginErrorEnum.PASSWORD_WRONG] = exceptions_1.LoginErrorPasswordWrongException,
                                _b[user_1.LoginErrorEnum.ALREADY_LOGIN] = exceptions_1.LoginErrorAlreadyLoginException,
                                _b[user_1.LoginErrorEnum.USERNAME_PWD_WRONG] = exceptions_1.LoginErrorUsernamePasswordWrongException,
                                _b[user_1.LoginErrorEnum.USERNAME_PWD_ORERRUN] = exceptions_1.LoginErrorUsernamePasswordOverrunException,
                                _b[user_1.LoginErrorEnum.USERNAME_PWD_MODIFY] = exceptions_1.LoginErrorUsernamePasswordModifyException,
                                _b);
                            var message = errorCodeToMessage[error.code] || 'Unknown';
                            var exception = errorCodeToException[error.code] || exceptions_1.ResponseErrorException;
                            throw new exception("".concat(error.code, ": ").concat(message), error.code);
                        }
                        else {
                            throw error;
                        }
                    })];
            });
        });
    };
    /**
     * Login user
     * @param forceNewLogin Force new loging even when State == LoginStateEnum.LOGGED_IN
     */
    User.prototype.login = function (forceNewLogin) {
        if (forceNewLogin === void 0) { forceNewLogin = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tries, stateLogin, _i, _a, i, error_1, passwordType;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tries = 5;
                        _i = 0, _a = Array.from(Array(tries).keys());
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 7];
                        i = _a[_i];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 6]);
                        return [4 /*yield*/, this.stateLogin()];
                    case 3:
                        stateLogin = (_b.sent());
                        return [3 /*break*/, 7];
                    case 4:
                        error_1 = _b.sent();
                        if (error_1 instanceof exceptions_1.ResponseErrorNotSupportedException) {
                            return [2 /*return*/, true];
                        }
                        // Some models reportedly close the connection if we attempt to access login state too soon after
                        // setting up the session etc. In that case, retry a few times. The error is reported to be
                        // ConnectionError: (
                        //     'Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))
                        if (i == tries - 1) {
                            throw error_1;
                        }
                        return [4 /*yield*/, this.delay((i + 1) / 10)];
                    case 5:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 6:
                        _i++;
                        return [3 /*break*/, 1];
                    case 7:
                        if (!stateLogin) {
                            return [2 /*return*/, true];
                        }
                        if (user_1.LoginStateEnum.LOGGED_IN == parseInt(stateLogin['State']) && !forceNewLogin) {
                            return [2 /*return*/, true];
                        }
                        passwordType = parseInt(stateLogin['password_type']);
                        return [2 /*return*/, this.attemptLogin(passwordType)];
                }
            });
        });
    };
    User.prototype.logout = function () {
        return this._connection.postSet('user/logout', { 'Logout': 1 });
    };
    User.prototype.stateLogin = function () {
        return this._connection.get('user/state-login');
    };
    User.prototype.remind = function () {
        return this._connection.get('user/remind');
    };
    User.prototype.password = function () {
        return this._connection.get('user/password');
    };
    User.prototype.pwd = function () {
        return this._connection.get('user/pwd');
    };
    User.prototype.setRemind = function (remind_state) {
        return this._connection.postSet('user/remind', {
            'remindstate': remind_state
        });
    };
    User.prototype.authenticationLogin = function () {
        return this._connection.get('user/authentication_login');
    };
    User.prototype.challengeLogin = function () {
        return this._connection.get('user/challenge_login');
    };
    User.prototype.hilinkLogin = function () {
        return this._connection.get('user/hilink_login');
    };
    User.prototype.historyLogin = function () {
        return this._connection.get('user/history-login');
    };
    User.prototype.heartbeat = function () {
        return this._connection.get('user/heartbeat');
    };
    User.prototype.webFeatureSwitch = function () {
        return this._connection.get('user/web-feature-switch');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    User.prototype.inputEvent = function () {
        return this._connection.get('user/input_event');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    User.prototype.screenState = function () {
        return this._connection.get('user/screen_state');
    };
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    User.prototype.session = function () {
        return this._connection.get('user/session');
    };
    return User;
}(ApiGroup_1.ApiGroup));
exports.User = User;
//# sourceMappingURL=User.js.map