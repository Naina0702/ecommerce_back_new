"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialUp = void 0;
var ApiGroup_1 = require("../ApiGroup");
var dialup_1 = require("../enums/dialup");
var DialUp = /** @class */ (function (_super) {
    __extends(DialUp, _super);
    function DialUp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get current LTE modem toggle state
     */
    DialUp.prototype.mobileDataswitch = function () {
        return this._connection.get('dialup/mobile-dataswitch');
    };
    DialUp.prototype.connection = function () {
        return this._connection.get('dialup/connection');
    };
    DialUp.prototype.dialupFeatureSwitch = function () {
        return this._connection.get('dialup/dialup-feature-switch');
    };
    DialUp.prototype.profiles = function () {
        return this._connection.get('dialup/profiles');
    };
    DialUp.prototype.autoApn = function () {
        return this._connection.get('dialup/auto-apn');
    };
    DialUp.prototype.dial = function () {
        return this._connection.postSet('dialup/dial', {
            'Action': 1
        });
    };
    /**
     * Toggle LTE modem state
     * @param dataswitch: number 0 to disable LTE modem, 1 to enable LTE modem
     */
    DialUp.prototype.setMobileDataswitch = function (dataswitch) {
        if (dataswitch === void 0) { dataswitch = 0; }
        return this._connection.postSet('dialup/mobile-dataswitch', {
            'dataswitch': dataswitch
        });
    };
    /**
     * @TODO requires is_encrypted=True for some modems
     * @param setDefault
     * @returns
     */
    DialUp.prototype.setDefaultProfile = function (setDefault) {
        if (setDefault === void 0) { setDefault = 0; }
        return this._connection.postSet('dialup/profiles', {
            'SetDefault': setDefault,
            'Delete': 0,
            'Modify': 0
        });
    };
    /**
     * @TODO requires is_encrypted=True for some modems
     * @param index
     * @returns
     */
    DialUp.prototype.deleteProfile = function (index) {
        return this._connection.postSet('dialup/profiles', {
            'SetDefault': 0,
            'Delete': index,
            'Modify': 0
        });
    };
    /**
     * @TODO requires is_encrypted=True for some modems
     * @param name
     * @param username
     * @param password
     * @param apn
     * @param dialupNumber
     * @param authMode
     * @param ipType
     * @param isDefault
     * @returns
     */
    DialUp.prototype.createProfile = function (name, username, password, apn, dialupNumber, authMode, ipType, isDefault) {
        if (authMode === void 0) { authMode = dialup_1.AuthModeEnum.AUTO; }
        if (ipType === void 0) { ipType = dialup_1.IpType.IPV4_IPV6; }
        if (isDefault === void 0) { isDefault = false; }
        return this._connection.postSet('dialup/profiles', {
            'SetDefault': isDefault ? 1 : 0,
            'Delete': 0,
            'Modify': 1,
            'Profile': {
                'Index': '',
                'IsValid': 1,
                'Name': name,
                'ApnIsStatic': apn ? 1 : 0,
                'ApnName': apn,
                'DialupNum': dialupNumber,
                'Username': username,
                'Password': password,
                'AuthMode': authMode,
                'IpIsStatic': '',
                'IpAddress': '',
                'DnsIsStatic': '',
                'PrimaryDns': '',
                'SecondaryDns': '',
                'ReadOnly': '0',
                'iptype': ipType
            }
        });
    };
    return DialUp;
}(ApiGroup_1.ApiGroup));
exports.DialUp = DialUp;
//# sourceMappingURL=DialUp.js.map