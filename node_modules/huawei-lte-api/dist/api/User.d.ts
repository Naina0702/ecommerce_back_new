import { ApiGroup } from '../ApiGroup';
import { Connection } from '../Connection';
import { GetResponseType, SetResponseType } from '../types';
export declare class User extends ApiGroup {
    private username;
    private _password?;
    constructor(connection: Connection, username?: string, password?: string);
    delay(seconds: number): Promise<never>;
    private attemptLogin;
    /**
     * Login user
     * @param forceNewLogin Force new loging even when State == LoginStateEnum.LOGGED_IN
     */
    login(forceNewLogin?: boolean): Promise<boolean>;
    logout(): Promise<SetResponseType>;
    stateLogin(): Promise<GetResponseType>;
    remind(): Promise<GetResponseType>;
    password(): Promise<GetResponseType>;
    pwd(): Promise<GetResponseType>;
    setRemind(remind_state: string): Promise<SetResponseType>;
    authenticationLogin(): Promise<GetResponseType>;
    challengeLogin(): Promise<GetResponseType>;
    hilinkLogin(): Promise<GetResponseType>;
    historyLogin(): Promise<GetResponseType>;
    heartbeat(): Promise<GetResponseType>;
    webFeatureSwitch(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    inputEvent(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    screenState(): Promise<GetResponseType>;
    /**
     * Endpoint found by reverse engineering B310s-22 firmware, unknown usage
     */
    session(): Promise<GetResponseType>;
}
